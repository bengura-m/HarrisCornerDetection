{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f91bfc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from skimage.data import astronaut, checkerboard\n",
    "from skimage.feature import corner_harris, corner_peaks\n",
    "from skimage.color import rgb2gray\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "727756ea",
   "metadata": {},
   "source": [
    "# My Harris Corner Detector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a726975",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Loading the images from skimage\n",
    "astronaut_image = astronaut()\n",
    "checkerboard_image = checkerboard()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a6bf89fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sobel x-axis kernel\n",
    "SOBEL_X = np.array((\n",
    "    [-1, 0, 1],\n",
    "    [-2, 0, 2],\n",
    "    [-1, 0, 1]), dtype=\"int32\")\n",
    "\n",
    "# Sobel y-axis kernel\n",
    "SOBEL_Y = np.array((\n",
    "    [-1, -2, -1],\n",
    "    [0, 0, 0],\n",
    "    [1, 2, 1]), dtype=\"int32\")\n",
    "\n",
    "# Gaussian kernel\n",
    "GAUSS = np.array((\n",
    "    [1/16, 2/16, 1/16],\n",
    "    [2/16, 4/16, 2/16],\n",
    "    [1/16, 2/16, 1/16]), dtype=\"float64\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4fd1b975",
   "metadata": {},
   "outputs": [],
   "source": [
    "def convolve(image, kernel):\n",
    "    # Checking if the kernel dimensions are odd\n",
    "    if kernel.shape[0] % 2 != 1 or kernel.shape[1] % 2 != 1:\n",
    "        raise ValueError(\"Only odd dimensions on filter supported\")\n",
    "\n",
    "    # Get the height and width of the input image\n",
    "    image_height = image.shape[0]\n",
    "    image_width = image.shape[1]\n",
    "\n",
    "    # Calculate the padding required for convolution\n",
    "    pad_height = kernel.shape[0] // 2\n",
    "    pad_width = kernel.shape[1] // 2\n",
    "\n",
    "    # Create a padding configuration for the image\n",
    "    padding = ((pad_height, pad_height), (pad_width, pad_width))\n",
    "\n",
    "    # Create an empty result image (output of convolution)\n",
    "    convolved_image = np.empty(image.shape, dtype=np.float64)\n",
    "\n",
    "    # Pad the input image with zeros\n",
    "    image = np.pad(image, padding, mode='constant', constant_values=0)\n",
    "\n",
    "    # Perform convolution\n",
    "    for i in np.arange(pad_height, image_height + pad_height):\n",
    "        for j in np.arange(pad_width, image_width + pad_width):\n",
    "            # Extract the region of interest (ROI)\n",
    "            roi = image[i - pad_height:i + pad_height + 1, j - pad_width:j + pad_width + 1]\n",
    "\n",
    "            # Calculate the convolution result for the current pixel\n",
    "            convolved_image[i - pad_height, j - pad_width] = (roi * kernel).sum()\n",
    "\n",
    "    # Normalize the result based on data type\n",
    "    if (convolved_image.dtype == np.float64):\n",
    "        # Normalize and convert the kernel for float results\n",
    "        kernel = kernel / 255.0\n",
    "        kernel = (kernel * 255).astype(np.uint8)\n",
    "    else:\n",
    "        # Normalize the result for other data types\n",
    "        convolved_image = convolved_image + abs(np.amin(convolved_image))\n",
    "        convolved_image = convolved_image / np.amax(convolved_image)\n",
    "        convolved_image = (convolved_image * 255.0)\n",
    "\n",
    "    return convolved_image\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68e08089",
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_harris_corner_detector(image, threshold=0.06, window_size=5, k=0.05):\n",
    "    # Convert the image to grayscale if it has multiple channels\n",
    "    gray_image = image if len(image.shape) == 2 else rgb2gray(image)\n",
    "\n",
    "    # Define Sobel filters for gradient computation\n",
    "    sobel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])\n",
    "    sobel_y = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]])\n",
    "\n",
    "    # Compute gradients using Sobel filters\n",
    "    I_x = convolve(gray_image, sobel_x)\n",
    "    I_y = convolve(gray_image, sobel_y)\n",
    "\n",
    "    # Calculate elements of the Harris matrix\n",
    "    I_x2 = I_x**2\n",
    "    I_y2 = I_y**2\n",
    "    I_xy = I_x * I_y\n",
    "\n",
    "    # Compute sums of squared gradients within the specified window\n",
    "    kernel = np.ones((window_size, window_size))\n",
    "    S_x2 = convolve(I_x2, kernel)\n",
    "    S_y2 = convolve(I_y2, kernel)\n",
    "    S_xy = convolve(I_xy, kernel)\n",
    "\n",
    "    # Calculate the Harris response\n",
    "    det = S_x2 * S_y2 - S_xy**2\n",
    "    trace = S_x2 + S_y2\n",
    "    harris_response = det - k * (trace**2)\n",
    "\n",
    "    # Apply thresholding to the Harris response\n",
    "    corners = np.where(harris_response > threshold)\n",
    "\n",
    "    return corners\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcf01f33",
   "metadata": {},
   "outputs": [],
   "source": [
    "def visualize_original(image, title):\n",
    "    # Display the astronaut image\n",
    "    plt.imshow(image)\n",
    "    plt.title(title)\n",
    "    plt.imshow(image, cmap='gray')\n",
    "    plt.show()\n",
    "\n",
    "def visualize_corners(image, title, corners_my, corners_skimage):\n",
    "    plt.imshow(image, cmap='gray')\n",
    "    plt.title(title)\n",
    "    plt.plot(corners_my[1], corners_my[0], 'ro', markersize=3, label='My Corners')\n",
    "    plt.plot(corners_skimage[:, 1], corners_skimage[:, 0], 'b+', markersize=5, label='Skimage Corners')\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "def main():\n",
    "    # Load the input images\n",
    "    astronaut_image = astronaut()\n",
    "    checkerboard_image = checkerboard()\n",
    "    \n",
    "    # Visualize the original images\n",
    "    visualize_original(astronaut_image, 'Astronaut Original Image')\n",
    "    visualize_original(checkerboard_image, 'Checkerboard Original Image')\n",
    "    \n",
    "    # Detect corners using my_harris_corner_detector1\n",
    "    corners_astronaut = my_harris_corner_detector(astronaut_image, threshold= 0.5,window_size=7, k=0.1)\n",
    "    corners_checkerboard = my_harris_corner_detector(checkerboard_image, threshold= 0.5,window_size=6, k=0.01)\n",
    "\n",
    "    # Detect corners using Skimage's corner_harris and corner_peaks\n",
    "    harris_response_astronaut = corner_harris(rgb2gray(astronaut_image))\n",
    "    corners_peaks_astronaut = corner_peaks(harris_response_astronaut)\n",
    "    \n",
    "    harris_response_checkerboard = corner_harris(checkerboard_image)\n",
    "    corners_peaks_checkerboard = corner_peaks(harris_response_checkerboard)\n",
    "    \n",
    "\n",
    "    #Visualize the corner images\n",
    "    visualize_corners(astronaut_image, 'Astronaut Cornered Image', corners_astronaut, corners_peaks_astronaut)\n",
    "    visualize_corners(checkerboard_image, 'Checkerboard Cornered Image', corners_checkerboard, corners_peaks_checkerboard)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
